Joe Zeimen
Project 7
ANN


My implementation is a ruby class called ANN with some private helper classes. The ANN contains Nodes and Connections, and the ability to produce an output from input data. The methods others should be able to use are:

.new (the constructor_
The parameters for this are the number of nodes in the input, hidden, and output layers

.set_inputs(Array of numbers)
Simply provide an array the same size as the input nodes in the ANN

.get_outputs
has the ANN calculate the output and returns the array of values from the ANN's output

.train(inputs, outputs)
Trains the ANN with the inputs and outputs as parameters to the function



See main.rb for an example of how these functions are used


Some observations:


Different functions can be used as the output for each node. Using a sigmoid function, such as tanh(),  makes it impossible to really get to -1 or 1 since it runs asymtotically to -1 and 1. The more training iterations the closer they get, but it still doesn't get that close. Using a linear function, such as just using the sum of the weights times the inputs, makes it so it will converge very quicly. With the rounding errors of floating points we can get to exactly the correct solutions. I'm leaving it as the sigmoid function for now. There are places in the sigmoid() and dsigmoid() functions to switch it back to linear.


Increasing the number of iterations in training when using a sigmoid function after a while did very little to improve results. Usually you wouldn't want to get exact numbers in an ANN anyways. 

